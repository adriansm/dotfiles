if has('win32') || has ('win64')
    let $VIMHOME = $VIM."/vimfiles"
else
    let $VIMHOME = $HOME."/.vim"
    if filereadable(expand($HOME.'/.vimrc.local'))
        source $HOME/.vimrc.local
    end
endif

let s:was_compatible = &compatible
if s:was_compatible
  " We can't do this unconditionally: set nocompatible fires other vim events
  " which we don't want to re-run if you already have nocompatible set.
  set nocompatible
endif

""""""""""""""""""""""""""""""
" Vim-plug Plugins
""""""""""""""""""""""""""""""

call plug#begin(expand('~/.vim/plugged'))
  " Make sure you use single quotes

  "*** Syntax Plugins ***

  " Allow editorconfig to set syntax
  Plug 'editorconfig/editorconfig-vim'

  " Syntax checker
  Plug 'scrooloose/syntastic'

  " logcat syntax
  Plug 'naseer/logcat'

  " markdown syntax
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'

  " language pack
  Plug 'sheerun/vim-polyglot'

  " support lua in vim
  "Plug 'xolox/vim-lua-ftplugin'

  " other syntax
  Plug 'elzr/vim-json'
  Plug 'nickhutchinson/vim-cmake-syntax'
  "Plug 'xolox/vim-misc'

  "*** Code Editor ***

  " Easily add comments
  Plug 'scrooloose/nerdcommenter'

  " Quick shortcuts
  Plug 'tpope/vim-unimpaired'

  " status bar and integratino with tmux
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'edkolev/tmuxline.vim'
  Plug 'christoomey/vim-tmux-navigator'

  "*** Themes ***
  Plug 'sheerun/vim-wombat-scheme'
  "Plug 'jacoborus/tender.vim'
  "Plug 'keith/parsec.vim'
  "Plug 'joshdick/onedark.vim'

  "*** Code Browse ***

  " Outline of source code
  Plug 'majutsushi/tagbar'

  " Tag list (same as above)?
  "Plug 'vim-scripts/taglist.vim'

  " vim file explorer
  Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
  Plug 'Xuyuanp/nerdtree-git-plugin'

  " fast file switching
  "Plug 'wincent/command-t'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --key-bindings --completion' }

  " easily jump to root of project
  Plug 'dbakker/vim-projectroot'

  " git plugin
  Plug 'tpope/vim-fugitive'

  " show signs of lines add/deleted
  Plug 'airblade/vim-gitgutter'

  " go to line when opening with 'vim file:line'
  Plug 'bogado/file-line'

  " search tool from vim
  Plug 'mileszs/ack.vim'
  "Plug 'rking/ag.vim'
  Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }

  " set vim bookmarks
  Plug 'MattesGroeger/vim-bookmarks'

  Plug 'Valloric/ListToggle'

  "*** Others ***

  " dispatch make async
  Plug 'tpope/vim-dispatch'

  " defaults everyone can agree on
  Plug 'tpope/vim-sensible'

if exists('+python') || has("nvim")
  Plug 'SirVer/ultisnips'
  " If enabling google's version need to disable this
  if get(g:, 'use_google_ycm', 0) == 0
    " Code Completion
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --java-completer' }
  endif
  "Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
endif

" Initialize plugin system
call plug#end()


" Local plugins
set rtp^=$VIMHOME/custom/adrian.vim

""""""""""""""""""""""""""""""
" Editor Settings
""""""""""""""""""""""""""""""

" ** User Interface **
set history=50
set wildmode=list:longest,full

" ** Text Formatting **
set nowrap              " Do not wrap words (view)
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set wildmenu            " enhanced command completion
set visualbell          " use visual bell instead of beeping
set list listchars=tab:â†’\ ,

set shiftwidth=4
set tabstop=4
set shiftround
set expandtab
set copyindent

set formatoptions-=t

augroup filetype
  autocmd BufNewFile,BufRead *.dts,*.dtsi set filetype=dts
  autocmd BufNewFile,BufRead *.cmake,CMakeLists.txt setf cmake
  autocmd BufNewFile,BufRead */.Postponed/* set filetype=mail
  autocmd BufNewFile,BufRead *.txt set filetype=human
  autocmd BufNewFile,BufRead *.ctp set filetype=php
  autocmd BufNewFile,BufRead *.aidl,*.hal set filetype=java
  autocmd BufNewFile,BufRead CMakeLists.txt,*.cmake set filetype=cmake
  autocmd BufNewFile,BufRead *.cmm set filetype=practice
augroup END

autocmd FileType mail,human set formatoptions+=t textwidth=80
"autocmd FileType make set noexpandtab shiftwidth=8
autocmd FileType perl,css set smartindent
autocmd FileType html set formatoptions+=tl
autocmd FileType html,css set noexpandtab tabstop=4

autocmd BufNewFile,BufRead COMMIT_EDITMSG set spell textwidth=70
autocmd BufNewFile,BufRead *.cmm set noexpandtab tabstop=8 shiftwidth=8

" ** Search & Replace **
set gdefault
set incsearch           " Incremental search
set hlsearch            " Highlight search match
set ignorecase          " Do case insensitive matching
set smartcase           " do not ignore if search pattern has CAPS

" ** Keystrokes -- Moving around **
set whichwrap=h,l,~,[,]

" backups
set nobackup            " do not write backup files
set noswapfile          " do not write .swp files

set clipboard=unnamed,unnamedplus

" ** MISC **
"Remove the Windows ^M
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

cmap w!! w !sudo tee % >/dev/null

"Paste toggle - when pasting something in, don't indent.
set pastetoggle=<F3>

" Delete buffer without closing window
nmap <Leader>bd :b#<bar>bd#<CR>

" jump to the last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Color column after text width
if exists('+colorcolumn')
    let &colorcolumn="+" . join(range(1,140), ",+")
    "set colorcolumn=+1
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

highlight ColorColumn term=reverse ctermbg=1 guibg=gray2
augroup colorcolumn
    autocmd!
    autocmd ColorScheme highlight ColorColumn term=reverse ctermbg=1 guibg=gray2
augroup end

" show line numbers
set number relativenumber

" toggle relative numbers for active buffers
augroup numbertoggle
  autocmd!
  autocmd WinEnter,BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd WinLeave,BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

highlight LineNr ctermfg=darkgrey guifg=#050505

" Set cursor line only on selected window
autocmd WinEnter * setlocal cursorline
autocmd BufEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
setlocal cursorline

" enable mouse support
set mouse=a
if !has("nvim")
  if has("mouse_sgr")
      set ttymouse=sgr
  else
      set ttymouse=xterm2
  end
end

" copy the current text selection to the system clipboard
if has('gui_running') || has('nvim') && exists('$DISPLAY')
  noremap <Leader>y "+y
else
  " copy to attached terminal using the yank(1) script:
  " https://github.com/sunaku/home/blob/master/bin/yank
  noremap <silent> <Leader>y y:call system('yank > /dev/tty', @0)<Return>
endif

" Easily split windows
nmap <C-W>\| :vsplit<CR>
nmap <C-W>- :split<CR>

""""""""""""""""""""""""""""""
" Design Changes
""""""""""""""""""""""""""""""

if (($COLORTERM != 'gnome-terminal') && ($TERM != 'screen'))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1

    if (has("termguicolors"))
        " set Vim-specific sequences for RGB colors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
endif

"" Format the statusline
"set statusline=\ %<%F\ %h%m%r%=%{fugitive#statusline()}\ %-14.(%l/%L:%c%V%)

"" Syntastic plugin warnings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

set background=dark
let g:solarized_termcolors=256
let g:rehash256=1
colorscheme adrian

""""""""""""""""""""""""""""""
" ADD ONS
""""""""""""""""""""""""""""""

if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  set csto=0
  set cst

  map <leader>sr  :cs find c <C-R>=expand("<cword>")<CR><CR>
  map <leader>ss  :cs find s <C-R>=expand("<cword>")<CR><CR>
  map <leader>sd  :cs find d <C-R>=expand("<cword>")<CR><CR>

  function! LoadCscope()
    let db = findfile("cscope.out", ".;")
    if (!empty(db))
      let path = strpart(db, 0, match(db, "/cscope.out$"))
      set nocscopeverbose " suppress 'duplicate connection' error
      exe "cs add " . db . " " . path
      set cscopeverbose
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
    endif
  endfunction
  au BufEnter /* call LoadCscope()
endif

" ** YouCompleteMe **
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoTo<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <C-q> :YcmCompleter GetDoc

nnoremap <F9> :YcmForceCompileAndDiagnostics<CR>

"let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm/ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_always_populate_location_list = 1
let g:ycm_server_log_level = 'debug'

" ** Syntastic **
function! DetectCheckPatch(file)
  let topdir = fnamemodify(finddir('.git', a:file . ';'), ':h')

  if !filereadable(topdir . '/Kbuild')
    return
  endif

  if executable(topdir . '/scripts/checkpatch.pl')
    let g:syntastic_cpp_checkpatch_exec = fnamemodify(topdir . '/scripts/checkpatch.pl', ':p')
    let b:syntastic_cpp_checkers = ["checkpatch"]
  endif
endfunction

"augroup kernel
  "autocmd BufNewFile,BufReadPost *.c,*.h :call DetectCheckPatch(expand('<afile>:p'))
"augroup END

let g:syntastic_c_check_header = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'

let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "active_filetypes": ["ruby", "php"],
      \ "passive_filetypes": ["java", "c"] }

" ** UltiSnips **
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

" ** airline/tmux line **
let g:airline_skip_empty_sections = 1
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#ycm#enabled = 1

let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ }
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1
"%3p%% %#__accent_bold#%{g:airline_symbols.linenr}%4l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__# :%3v
let g:airline_section_z = "%4l/%L%{g:airline_symbols.maxlinenr} :%3v"

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>[ <Plug>AirlineSelectPrevTab
nmap <leader>] <Plug>AirlineSelectNextTab

let g:airline#extensions#whitespace#mixed_indent_algo = 2

"let g:tmuxline_powerline_separators = 0

"let g:tmuxline_separators = {
    "\ 'left' : '',
    "\ 'left_alt': '>',
    "\ 'right' : '',
    "\ 'right_alt' : '<',
    "\ 'space' : ' '}

let g:airline#extensions#tmuxline#snapshot_file = "~/.tmux.design.conf"

" ** CtrlP options **
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \}
let g:ctrlp_working_path_mode = 'r'

" Allow use of leader as well as CtrlP
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

" ** Command T **
let g:CommandTFileScanner = 'git'
let g:CommandTTraverseSCM = 'file'
let g:CommandTMaxFiles=60000

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  "set grepprg=ag\ --vimgrep

  " Replace ack searcher
  let g:ackprg = 'ag --smart-case'
  cnoreabbrev ag Ack

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" quick search with ctrl-shift-K binding
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap K :Grepper -open -cword -noprompt<cr>
nnoremap <leader>f :Grepper<cr>
nnoremap <leader>fw :Grepper -open -cword -noprompt<cr>
nnoremap <leader>fr :Grepper -open -dir repo,filecwd -cword -noprompt<cr>
nnoremap <leader>fs :Grepper -open -side -dir repo,filecwd -cword -noprompt<cr>

let g:grepper               = {
      \ 'tools':          ['git', 'ag', 'rg'],
      \ 'jump':           1,
      \ 'simple_prompt':  1,
      \ 'quickfix':       1,
      \ 'git':            { 'grepprg': 'git grep --no-color -nI' }
      \ }


"let g:grepper.tools         = ['git', 'ag', 'rg']
"let g:grepper.jump          = 1
"let g:grepper.simple_prompt = 1
"let g:grepper.quickfix      = 0
"let g:grepper.git.grepprg   = 'git grep --no-color -nI'

" ** File Explorer **
let g:explVertical=1
let g:explWinSize=35
let g:explSplitLeft=1
let g:explSplitBelow=1
let g:explHideFiles='^\.,.*\.class$,.*\.swp$,.*\.pyc$,.*\.swo$,\.DS_Store$'
let g:explDetailedHelp=0

" ** Minibuffer **
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 2
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:bufExplorerSortBy = "name"

map <C-n> :NERDTreeToggle<CR>
map <Leader>t :TagbarToggle<CR>

" ** Vim bookmarks **
let g:bookmark_highlight_lines = 1
let g:bookmark_save_per_working_dir = 1

" Finds the Git super-project directory based on the file passed as an argument.
function! g:BMBufferFileLocation(file)
    let filename = 'vim-bookmarks'
    let location = ''
    if isdirectory(fnamemodify(a:file, ":p:h").'/.git')
        " Current work dir is git's work tree
        let location = fnamemodify(a:file, ":p:h").'/.git'
    else
        " Look upwards (at parents) for a directory named '.git'
        let location = finddir('.git', fnamemodify(a:file, ":p:h").'/.;')
    endif
    if len(location) > 0
        return simplify(location.'/.'.filename)
    else
        return simplify(fnamemodify(a:file, ":p:h").'/.'.filename)
    endif
endfunction

" Operations on changed lines
function! GlobalChangedLines(ex_cmd)
  for hunk in GitGutterGetHunks()
    for lnum in range(hunk[2], hunk[2]+hunk[3]-1)
      let cursor = getcurpos()
      silent! execute lnum.a:ex_cmd
      call setpos('.', cursor)
    endfor
  endfor
endfunction

" editor config
let g:EditorConfig_max_line_indicator = "fill"
" make editorconfig work nice with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

command! -nargs=1 Glines call GlobalChangedLines(<q-args>)

" Remove triling whitespace on edited lines
autocmd BufWritePre * Glines s/\s\+$/

""""""""""""""""""""""""""""""
" Auto Completion
""""""""""""""""""""""""""""""
set nocp

" ** OmniCppComplete **
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" build tags of your own project with F12
nnoremap <expr> <leader>tg ':!ctags -f '.projectroot#guess().'/tags -R '.projectroot#guess().' <cr><cr>'


""""""""""""""""""""""""""""""
" Vim Diff Setup
""""""""""""""""""""""""""""""
function! IgnoreDiff(pattern)
    let opt = ""
    if &diffopt =~ "icase"
      let opt = opt . "-i "
    endif
    if &diffopt =~ "iwhite"
      let opt = opt . "-b "
    endif
    let cmd = "!diff -a --binary " . opt .
      \ " <(perl -pe 's/" . a:pattern .  "/\".\" x length($0)/gei' " .
      \ v:fname_in .
      \ ") <(perl -pe 's/" . a:pattern .  "/\".\" x length($0)/gei' " .
      \ v:fname_new .
      \ ") > " . v:fname_out
    echo cmd
    silent execute cmd
    redraw!
    return cmd
endfunction
command! IgnoreDiffDiffs set diffexpr=IgnoreDiff('^@@\ .*\|^index\ .*\|^commit\ .*') | diffupdate<CR>

" Custom setup for vimdiff
function! DiffSetup()
  set nofoldenable foldcolumn=0 number
  wincmd b
  set nofoldenable foldcolumn=0 number
  let &columns = &columns * 2
  wincmd =
  winpos 0 0
endfun

if &diff
  autocmd VimEnter * call DiffSetup()
endif

" Load all plugins before following line
filetype plugin indent on    " required
syntax on

" override backround for autocomplete popup on angr theme
"hi Pmenu      guibg=#3a3a3a ctermbg=237

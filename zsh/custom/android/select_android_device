#!/bin/zsh

: ${FASTBOOT_BIN:=$(whence -p fastboot)}
: ${ADB_BIN:=$(whence -p adb)}

declare -a ANDROID_DEVICES_COLUMNS=(serial devrev build protocol)
declare -A ANDROID_DEVICES_HEADERS=(
  [serial]=" Serial No"
  [devrev]=" Device (Revision)"
  [build]="  Android Build"
  [protocol]="  Mode "
)

function get_android_adb_var()
{
  local aserial=$1
  local varname=$2
  echo -n $($ADB_BIN -s $aserial shell getprop $varname)
}

function get_android_fb_var()
{
  local aserial=$1
  local varname=$2
  local pre=
  [ -z "$(command -v timeout)" ] || pre="timeout 1s"
  local val=$(${=pre} fastboot -s $aserial getvar $varname 2>&1 | grep ^${varname} | sed -E "s/${varname}: //g")
  [ -n "$val" -a "$val" != "unknown variable" ] && [[ "$val" =~ ^[[:alnum:]].* ]] && echo $val
}

function get_android_adb_info()
{
  local aserial=${1:-$ANDROID_SERIAL}
  [ "$aserial" = "" ] && return 1

  local state=$($ADB_BIN -s $aserial get-state 2>/dev/null)
  [ "$state" != "device" ] && return 1

  declare -A devinfo=(
    [serial]="$aserial"
    [dev]="$(get_android_adb_var $aserial ro.hardware)"
    [rev]="$(get_android_adb_var $aserial ro.revision)"
    [build]="$(get_android_adb_var $aserial ro.build.id)"
    [protocol]="adb"
  )
  declare -p devinfo
}

function get_android_fb_info()
{
  local aserial=${1:-$ANDROID_SERIAL}
  [ "$aserial" = "" ] && return 1

  local fb_connected=$($FASTBOOT_BIN devices | grep ^$aserial)
  [ -n "$fb_connected" ] || return 1
  local dev=$(get_android_fb_var $aserial product)
  # if no output found now, it's likely going to fail for next ones too
  [ -n "$dev" ] || return 1

  declare -A devinfo=(
    [serial]=$aserial
    [dev]=$dev
    [rev]=$(get_android_fb_var $aserial hw-revision)
    [build]=$(get_android_fb_var $aserial version-bootloader)
    [protocol]=fastboot
  )
  declare -p devinfo
}

function print_row()
{
  eval "declare -A devinfo=${1#*=}"
  [ -z "${devinfo[devrev]}" ] && devinfo[devrev]="${devinfo[dev]} (${devinfo[rev]})"

  declare -a fields=()
  for k in "${(@k)ANDROID_DEVICES_COLUMNS}"; do
    fields+=${devinfo[$k]:-"N/A"}
  done
  echo ${(j:\t| :)fields}
}

function print_header()
{
  declare -A sep
  for k in "${(@k)ANDROID_DEVICES_COLUMNS}"; do
    local len=$(((${#ANDROID_DEVICES_HEADERS[$k]}+1)/2))
    sep[$k]=$(printf " -"%.0s {1..$len})
  done
  print_row "$(declare -p ANDROID_DEVICES_HEADERS)"
  print_row "$(declare -p sep)"
}

function list_android_devices_helper()
{
  while getopts 'h' arg; do
    case $arg in
      h) print_header ;;
    esac
  done
  shift $((OPTIND-1))

  if command adb start-server; then
    local adb_devices=$(command adb devices -l | sed -n "2,100p")
    for dev in ${(f)adb_devices}; do
      local aserial=${dev%% *}
      print_row "$(get_android_adb_info $aserial)"
    done
  fi

  local fb_devices=$(command fastboot devices -l)
  for dev in ${(f)fb_devices}; do
    local aserial=${dev%% *}
    print_row "$(get_android_fb_info $aserial)"
  done
}

function list_android_devices()
{
  list_android_devices_helper $@ | column -t -s $'\t'
}

function show_android_device()
{
  local aserial=${1:-$ANDROID_SERIAL}
  local info=$(get_android_adb_info $ANDROID_SERIAL || get_android_fb_info $ANDROID_SERIAL)

  [ -n "$info" ] || return 1
  eval "declare -A devinfo=${info#*=}"

  echo -n "${devinfo[dev]} (${devinfo[rev]})"
  [ -n "${devinfo[build]}" ] && echo -n ":${devinfo[build]# }"
  echo ":${aserial}"
}

function select_android_device_fzf()
{
  local devices=("${(@f)$(list_android_devices)}")
  if [ -z "$devices" ]; then
    echo "No devices connected!"
    return 1
  fi

  local fzf_header="Choose from available connected devices: "
  local fzf_args=(
    --height=$((3+${#devices[@]}))
    --exit-0
    --reverse
    --inline-info
  )
  if [ -n "$1" ]; then
    fzf_args+=(
      --select-1
      --query="$*"
    )
  fi

  local selection=$(echo "${(j:\n:)devices}" | fzf ${fzf_args} --header="${fzf_header}")
  # assumes serial is the first argument
  local aserial=${selection%% *}

  if [ -z "$aserial" ]; then
    if [ -n "$1" ]; then
      echo "No devices matching: \"$@\""
    else
      echo "No device selected"
    fi
    return 1
  fi

  export ANDROID_SERIAL=${aserial}
  echo -n "Selected device: "
  show_android_device
}

function select_android_device_list()
{
  local devices=("${(@f)$(list_android_devices)}")
  if [ -z "$devices" ]; then
    echo "No devices connected!"
    return 1
  fi

  local counter=0
  local selection=$1
  declare -a serial_list
  if [ -z "$selection" ]; then
    echo "Choose from connected devices"

    for dev in ${devices}; do
      let counter=counter+1
      serial_list[$counter]=${dev%% *}

      echo "${counter}. ${dev}"
    done

    read selection\?"Select option: "
  fi
  echo
  if ! [[ "$selection" =~ ^[0-9]+$ ]]; then
    echo "Invalid option \"$selection\". Should be numeric"
    return 1
  elif [ "${serial_list[$selection]}" = "" ]; then
    echo "Invalid option \"$selection\""
    return 1
  fi

  export ANDROID_SERIAL=${serial_list[$selection]}
  echo -n "Selected device #${selection}: "
  show_android_device
}

function usage()
{
  print "Usage: select_android_device [OPTIONS] [DEVICE]

If provided will try to find a device that matches closely DEVICE argument

Options:
  -a      Use list and prompt for device selection instead of fzf
  -f      Force use of fzf for device selection
  -l      List Android devices connected and exit
  -h      Print this help"
}

pref="auto"
while getopts 'aflhp?' arg; do
  case $arg in
    a) pref="list" ;;
    f) pref="fzf" ;;
    l) list_android_devices -h; return 0 ;;
    p) show_android_device; return 0 ;;
    h|?) usage; return 0; ;;
  esac
done
shift $((OPTIND-1))

if [ "$pref" != "list" -a -n "$(command -v fzf)" ]; then
  select_android_device_fzf $@
elif [ "$pref" != "fzf" ]; then
  select_android_device_list $@
fi

